{"ast":null,"code":"var _jsxFileName = \"/home/manasa/practice/expense-tracker/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import { Home, PlusCircle, XCircle, Edit2, Trash2 } from 'lucide-react';\n// import axios from 'axios';\n\n// function App() {\n//   const [expenses, setExpenses] = useState([]);\n//   const [newExpense, setNewExpense] = useState({\n//     title: '',\n//     amount: '',\n//     category: '',\n//     type: 'Debit' // Default type is Debit\n//   });\n//   const [balance, setBalance] = useState(0);\n\n//   useEffect(() => {\n//     fetchExpenses();\n//   }, []);\n\n//   useEffect(() => {\n//     calculateBalance();\n//   }, [expenses]);\n\n//   const fetchExpenses = async () => {\n//     try {\n//       const response = await axios.get('http://localhost:5000/api/expenses');\n//       setExpenses(response.data);\n//     } catch (error) {\n//       console.error('Error fetching expenses:', error);\n//     }\n//   };\n\n//   const [dropdownOpen, setDropdownOpen] = useState(false);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewExpense(prevState => ({\n//       ...prevState,\n//       [name]: value\n//     }));\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post('http://localhost:5000/api/expenses', newExpense);\n//       setNewExpense({ title: '', amount: '', category: '', type: 'Debit' });\n//       fetchExpenses(); // Refresh the expense list after adding a new expense\n//     } catch (error) {\n//       console.error('Error adding expense:', error);\n//     }\n//   };\n\n//   const handleDropdownItemClick = (value) => {\n//     setNewExpense(prevState => ({\n//       ...prevState,\n//       type: value\n//     }));\n//     setDropdownOpen(false); // Close the dropdown\n//   };\n//   const handleEdit = async (id) => {\n//     // Fetch the expense to be edited\n//     console.log(\"handleEdit ----------\");\n//     console.log(\"id: \",id);\n//     const expenseToEdit = expenses.find(expense => expense._id === id);\n//     console.log(\"expenseToEdit: \", expenseToEdit);\n//     if (!expenseToEdit) {\n//       console.error('Expense not found');\n//       return;\n//     }\n\n//     // Ask user for new values\n//     const newTitle = prompt('Enter new title', expenseToEdit.title);\n//     const newAmount = parseFloat(prompt('Enter new amount', expenseToEdit.amount));\n//     const newCategory = prompt('Enter new category', expenseToEdit.category);\n//     const newType = prompt('Enter new type (Debit or Credit)', expenseToEdit.type);\n\n//     // Prepare updated expense data\n//     const updatedExpense = {\n//       ...expenseToEdit,\n//       title: newTitle,\n//       amount: newAmount,\n//       category: newCategory,\n//       type: newType\n//     };\n//     console.log(\"updatedExpense: \", updatedExpense);\n\n//     // Make API call to update expense\n//     try {\n//       await axios.put(`http://localhost:5000/api/expenses/${id}`, updatedExpense);\n//       fetchExpenses(); // Refresh the expense list after editing\n//     } catch (error) {\n//       console.error('Error editing expense:', error);\n//     }\n//   };\n\n//   const handleDelete = async (id) => {\n//     try {\n//       await axios.delete(`http://localhost:5000/api/expenses/${id}`);\n//       setExpenses(prevExpenses => prevExpenses.filter(expense => expense._id !== id));\n//     } catch (error) {\n//       console.error('Error deleting expense:', error);\n//     }\n//   };\n\n//   const calculateBalance = () => {\n//     const totalCredit = expenses\n//       .filter(expense => expense.type === 'Credit')\n//       .reduce((acc, curr) => acc + parseFloat(curr.amount), 0);\n//     const totalDebit = expenses\n//       .filter(expense => expense.type === 'Debit')\n//       .reduce((acc, curr) => acc + parseFloat(curr.amount), 0);\n//     setBalance(totalCredit - totalDebit);\n//   };\n\n//   const getExpenseType = async (type) => {\n//     // if (type == 'Debit') {\n//     //   const amountDiv = document.getElementById('expAmount');\n//     //   amountDiv.classList.remove('green-font'); // Remove 'green-font' class\n//     //   amountDiv.classList.add('red-font'); // Add 'red-font' class\n//     // }\n//   };\n\n//   const [form, setHide] = useState(true);\n\n//   const showForm = () => {\n//     setHide(!form);\n//   };\n\n//   // $(\".dropdown-menu li\").click(function() {\n//   //   $(this).parents(\".dropdown\").find('.btn').html($(this).text() + ' <span class=\"caret\"></span>');\n//   //   $(this).parents(\".dropdown\").find('.btn').val($(this).data('value'));\n//   // });\n\n//   return (\n//     <div className='main'>\n//       <div className='main-header'>\n//         <Home className='align-svg-home'/>\n//         <p>Expense Tracker</p>\n//         <PlusCircle className='align-svg-plus' onClick={showForm}/>\n//       </div>\n//       <h2>Balance: ₹{balance.toFixed(2)}</h2>\n//       <form id='inputForm' className={form ? 'hidden' : ''} onSubmit={handleSubmit}>\n//         <div className=\"main-form\">\n//           <div className='close-form'>\n//             <XCircle onClick={showForm}/>\n//           </div>\n//           <label>\n//             Title:\n//             <input type=\"text\" name=\"title\" value={newExpense.title} onChange={handleInputChange} required placeholder='Ex: Salary'/>\n//           </label>\n//           <label>\n//             Amount:\n//             <input type=\"number\" name=\"amount\" value={newExpense.amount} onChange={handleInputChange} required placeholder='Ex: 100000'/>\n//           </label>\n//           <label>\n//             Category:\n//             <input type=\"text\" name=\"category\" value={newExpense.category} onChange={handleInputChange} required placeholder='Ex: Income'/>\n//           </label>\n//           <label>\n//             Type:\n//             {/* <div className=\"dropdown\" onClick={() => setDropdownOpen(!dropdownOpen)}>\n//               <button className=\"btn btn-primary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\">\n//                 {newExpense.type}\n//               </button>\n//               <ul className={`dropdown-menu${dropdownOpen ? ' show' : ''}`} aria-labelledby=\"dropdownMenuButton\">\n//                 <li className=\"dropdown-item\" onClick={() => handleDropdownItemClick('Debit')}>Debit</li>\n//                 <li className=\"dropdown-item\" onClick={() => handleDropdownItemClick('Credit')}>Credit</li>\n//               </ul>\n//             </div> */}\n\n//             <select name=\"type\" value={newExpense.type} onChange={handleInputChange}>\n//               <option value=\"Debit\">Debit</option>\n//               <option value=\"Credit\">Credit</option>\n//             </select>\n//           </label>\n//           <button className='submit-btn' type=\"submit\">Add Expense</button>\n//         </div>\n//       </form>\n//       <h2>Expenses</h2>\n//       <ul className='expense-list'>\n//         {expenses.slice().reverse().map(expense => (\n//           <li key={expense._id}>\n//             <div>\n//               {expense.title}\n//             </div>\n//             <div id='expAmount' className='green-font'>\n//               ₹ {expense.amount}\n//             </div>\n//             <div>\n//               <Edit2 onClick={() => handleEdit(expense._id)}/>\n//             </div>\n//             <div>\n//               <Trash2 onClick={() => handleDelete(expense._id)}/>\n//             </div>\n//              {/* - ₹ - {expense.category} - {expense.type}  onLoad={getExpenseType(expense.type)}*/}\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport HomePage from './components/HomePage';\nimport NewExpenseForm from './components/NewExpense';\n// import EditExpenseForm from './components/EditExpenseForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [expenses, setExpenses] = useState([]);\n  useEffect(() => {\n    fetchExpenses();\n  }, []);\n  const fetchExpenses = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/expenses');\n      setExpenses(response.data);\n    } catch (error) {\n      console.error('Error fetching expenses:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        children: /*#__PURE__*/_jsxDEV(HomePage, {\n          expenses: expenses,\n          fetchExpenses: fetchExpenses\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/new\",\n        element: /*#__PURE__*/_jsxDEV(NewExpenseForm, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 37\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 229,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"XCaxB2DEspMpdgcH+IrrPBpyP4o=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","BrowserRouter","Router","Routes","Route","HomePage","NewExpenseForm","jsxDEV","_jsxDEV","App","_s","expenses","setExpenses","useState","useEffect","fetchExpenses","response","axios","get","data","error","console","children","path","fileName","_jsxFileName","lineNumber","columnNumber","element","_c","$RefreshReg$"],"sources":["/home/manasa/practice/expense-tracker/frontend/src/App.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { Home, PlusCircle, XCircle, Edit2, Trash2 } from 'lucide-react';\n// import axios from 'axios';\n\n// function App() {\n//   const [expenses, setExpenses] = useState([]);\n//   const [newExpense, setNewExpense] = useState({\n//     title: '',\n//     amount: '',\n//     category: '',\n//     type: 'Debit' // Default type is Debit\n//   });\n//   const [balance, setBalance] = useState(0);\n\n//   useEffect(() => {\n//     fetchExpenses();\n//   }, []);\n\n//   useEffect(() => {\n//     calculateBalance();\n//   }, [expenses]);\n\n//   const fetchExpenses = async () => {\n//     try {\n//       const response = await axios.get('http://localhost:5000/api/expenses');\n//       setExpenses(response.data);\n//     } catch (error) {\n//       console.error('Error fetching expenses:', error);\n//     }\n//   };\n\n//   const [dropdownOpen, setDropdownOpen] = useState(false);\n\n//   const handleInputChange = (e) => {\n//     const { name, value } = e.target;\n//     setNewExpense(prevState => ({\n//       ...prevState,\n//       [name]: value\n//     }));\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       await axios.post('http://localhost:5000/api/expenses', newExpense);\n//       setNewExpense({ title: '', amount: '', category: '', type: 'Debit' });\n//       fetchExpenses(); // Refresh the expense list after adding a new expense\n//     } catch (error) {\n//       console.error('Error adding expense:', error);\n//     }\n//   };\n\n//   const handleDropdownItemClick = (value) => {\n//     setNewExpense(prevState => ({\n//       ...prevState,\n//       type: value\n//     }));\n//     setDropdownOpen(false); // Close the dropdown\n//   };\n//   const handleEdit = async (id) => {\n//     // Fetch the expense to be edited\n//     console.log(\"handleEdit ----------\");\n//     console.log(\"id: \",id);\n//     const expenseToEdit = expenses.find(expense => expense._id === id);\n//     console.log(\"expenseToEdit: \", expenseToEdit);\n//     if (!expenseToEdit) {\n//       console.error('Expense not found');\n//       return;\n//     }\n  \n//     // Ask user for new values\n//     const newTitle = prompt('Enter new title', expenseToEdit.title);\n//     const newAmount = parseFloat(prompt('Enter new amount', expenseToEdit.amount));\n//     const newCategory = prompt('Enter new category', expenseToEdit.category);\n//     const newType = prompt('Enter new type (Debit or Credit)', expenseToEdit.type);\n  \n//     // Prepare updated expense data\n//     const updatedExpense = {\n//       ...expenseToEdit,\n//       title: newTitle,\n//       amount: newAmount,\n//       category: newCategory,\n//       type: newType\n//     };\n//     console.log(\"updatedExpense: \", updatedExpense);\n  \n//     // Make API call to update expense\n//     try {\n//       await axios.put(`http://localhost:5000/api/expenses/${id}`, updatedExpense);\n//       fetchExpenses(); // Refresh the expense list after editing\n//     } catch (error) {\n//       console.error('Error editing expense:', error);\n//     }\n//   };\n  \n  \n//   const handleDelete = async (id) => {\n//     try {\n//       await axios.delete(`http://localhost:5000/api/expenses/${id}`);\n//       setExpenses(prevExpenses => prevExpenses.filter(expense => expense._id !== id));\n//     } catch (error) {\n//       console.error('Error deleting expense:', error);\n//     }\n//   };\n\n//   const calculateBalance = () => {\n//     const totalCredit = expenses\n//       .filter(expense => expense.type === 'Credit')\n//       .reduce((acc, curr) => acc + parseFloat(curr.amount), 0);\n//     const totalDebit = expenses\n//       .filter(expense => expense.type === 'Debit')\n//       .reduce((acc, curr) => acc + parseFloat(curr.amount), 0);\n//     setBalance(totalCredit - totalDebit);\n//   };\n\n//   const getExpenseType = async (type) => {\n//     // if (type == 'Debit') {\n//     //   const amountDiv = document.getElementById('expAmount');\n//     //   amountDiv.classList.remove('green-font'); // Remove 'green-font' class\n//     //   amountDiv.classList.add('red-font'); // Add 'red-font' class\n//     // }\n//   };\n\n//   const [form, setHide] = useState(true);\n\n//   const showForm = () => {\n//     setHide(!form);\n//   };\n\n//   // $(\".dropdown-menu li\").click(function() {\n//   //   $(this).parents(\".dropdown\").find('.btn').html($(this).text() + ' <span class=\"caret\"></span>');\n//   //   $(this).parents(\".dropdown\").find('.btn').val($(this).data('value'));\n//   // });\n\n//   return (\n//     <div className='main'>\n//       <div className='main-header'>\n//         <Home className='align-svg-home'/>\n//         <p>Expense Tracker</p>\n//         <PlusCircle className='align-svg-plus' onClick={showForm}/>\n//       </div>\n//       <h2>Balance: ₹{balance.toFixed(2)}</h2>\n//       <form id='inputForm' className={form ? 'hidden' : ''} onSubmit={handleSubmit}>\n//         <div className=\"main-form\">\n//           <div className='close-form'>\n//             <XCircle onClick={showForm}/>\n//           </div>\n//           <label>\n//             Title:\n//             <input type=\"text\" name=\"title\" value={newExpense.title} onChange={handleInputChange} required placeholder='Ex: Salary'/>\n//           </label>\n//           <label>\n//             Amount:\n//             <input type=\"number\" name=\"amount\" value={newExpense.amount} onChange={handleInputChange} required placeholder='Ex: 100000'/>\n//           </label>\n//           <label>\n//             Category:\n//             <input type=\"text\" name=\"category\" value={newExpense.category} onChange={handleInputChange} required placeholder='Ex: Income'/>\n//           </label>\n//           <label>\n//             Type:\n//             {/* <div className=\"dropdown\" onClick={() => setDropdownOpen(!dropdownOpen)}>\n//               <button className=\"btn btn-primary dropdown-toggle\" type=\"button\" id=\"dropdownMenuButton\" data-toggle=\"dropdown\">\n//                 {newExpense.type}\n//               </button>\n//               <ul className={`dropdown-menu${dropdownOpen ? ' show' : ''}`} aria-labelledby=\"dropdownMenuButton\">\n//                 <li className=\"dropdown-item\" onClick={() => handleDropdownItemClick('Debit')}>Debit</li>\n//                 <li className=\"dropdown-item\" onClick={() => handleDropdownItemClick('Credit')}>Credit</li>\n//               </ul>\n//             </div> */}\n\n//             <select name=\"type\" value={newExpense.type} onChange={handleInputChange}>\n//               <option value=\"Debit\">Debit</option>\n//               <option value=\"Credit\">Credit</option>\n//             </select>\n//           </label>\n//           <button className='submit-btn' type=\"submit\">Add Expense</button>\n//         </div>\n//       </form>\n//       <h2>Expenses</h2>\n//       <ul className='expense-list'>\n//         {expenses.slice().reverse().map(expense => (\n//           <li key={expense._id}>\n//             <div>\n//               {expense.title}\n//             </div>\n//             <div id='expAmount' className='green-font'>\n//               ₹ {expense.amount}\n//             </div>\n//             <div>\n//               <Edit2 onClick={() => handleEdit(expense._id)}/>\n//             </div>\n//             <div>\n//               <Trash2 onClick={() => handleDelete(expense._id)}/>\n//             </div>\n//              {/* - ₹ - {expense.category} - {expense.type}  onLoad={getExpenseType(expense.type)}*/}\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\nimport React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport HomePage from './components/HomePage';\nimport NewExpenseForm from './components/NewExpense';\n// import EditExpenseForm from './components/EditExpenseForm';\n\nconst App = () => {\n  const [expenses, setExpenses] = useState([]);\n\n  useEffect(() => {\n    fetchExpenses();\n  }, []);\n\n  const fetchExpenses = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/api/expenses');\n      setExpenses(response.data);\n    } catch (error) {\n      console.error('Error fetching expenses:', error);\n    }\n  };\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/\">\n          <HomePage expenses={expenses} fetchExpenses={fetchExpenses} />\n        </Route>\n        <Route path=\"/new\" element={<NewExpenseForm/>} />\n        {/* <Route path=\"/edit\" component={EditExpenseForm} /> */}\n      </Routes>\n    </Router>\n  );\n};\n\nexport default App;\n\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,IAAIC,MAAM,EAAEC,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AACzE,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,cAAc,MAAM,yBAAyB;AACpD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGC,QAAQ,CAAC,EAAE,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACdC,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,aAAa,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACtEN,WAAW,CAACI,QAAQ,CAACG,IAAI,CAAC;IAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAClD;EACF,CAAC;EACD,oBACEZ,OAAA,CAACN,MAAM;IAAAoB,QAAA,eACLd,OAAA,CAACL,MAAM;MAAAmB,QAAA,gBACLd,OAAA,CAACJ,KAAK;QAACmB,IAAI,EAAC,GAAG;QAAAD,QAAA,eACbd,OAAA,CAACH,QAAQ;UAACM,QAAQ,EAAEA,QAAS;UAACI,aAAa,EAAEA;QAAc;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzD,CAAC,eACRnB,OAAA,CAACJ,KAAK;QAACmB,IAAI,EAAC,MAAM;QAACK,OAAO,eAAEpB,OAAA,CAACF,cAAc;UAAAkB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAE3C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEb,CAAC;AAACjB,EAAA,CA1BID,GAAG;AAAAoB,EAAA,GAAHpB,GAAG;AA4BT,eAAeA,GAAG;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}